databases:
  - name: eulearn-staging-db
    plan: free
    ipAllowList: []

services:
  - name: eulearn-staging-redis
    plan: free
    type: redis
    ipAllowList: []

  - name: eulearn-staging-backend
    plan: free
    type: web
    env: python
    rootDir: ./backend
    buildCommand: |
      pipenv install --dev
      python manage.py shell -c "
      from django.contrib.auth import get_user_model;
      User = get_user_model();
      username = '${DJANGO_SU_NAME}';
      email = '${DJANGO_SU_EMAIL}';
      password = '${DJANGO_SU_PASSWORD}';
      if not User.objects.filter(username=username).exists():
      User.objects.create_superuser(username=username, email=email, password=password)
      "
    
    startCommand: "pipenv run daphne backend.asgi:application"
    branch: preview
    envVars:
      - key: REDIS_URL
        fromService:
          name: eulearn-staging-redis
          type: redis
          property: connectionString

      - key: DJANGO_SETTINGS_MODULE
        value: "backend.settings"

      - key: FRONTEND_URL
        sync: false

      - key: DATABASE_URL
        fromDatabase:
          name: eulearn-staging-db
          property: connectionString

      - key: SECRET_KEY
        generateValue: true

      - key: S3_ACCESS_KEY
        sync: false

      - key: S3_SECRET_KEY
        sync: false

      - key: S3_BUCKET_NAME
        sync: false

      - key: S3_BUCKET_NAME_STATIC
        sync: false

      - key: S3_ENDPOINT
        sync: false

      - key: DJANGO_SU_NAME
        sync: false

      - key: DJANGO_SU_EMAIL
        sync: false

      - key: DJANGO_SU_PASSWORD
        sync: false

  - name: eulearn-staging-frontend
    env: node
    plan: free
    type: web
    rootDir: ./frontend
    buildCommand: "npm install && npm run build"
    startCommand: "npm start"
    branch: preview
    envVars:
      - key: NEXT_PUBLIC_BACKEND_URI
        sync: false



